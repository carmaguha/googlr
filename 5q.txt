global N
N = 4
# A utility function to check if a queen can
# be placed on board[row][col]. Note that this # function is called when "col" queens are
# already placed in columns from 0 to col -1. # So we need to check only left side for
# attacking queens
def printSolution(board):
    for i in range(N):
        for j in range(N):
            print(board[i][j], end=" ")
        print()

# Check this row on left side
def isSafe(board, row, col):
    for i in range(col):#we check for same row of every colS
        if board[row][i] == 1:#wherver we place queen we write 1
            return False

    #for upper left diagonal(row-- , col--)
    for i, j in zip(range(row, -1, -1),
                    range(col, -1, -1)):
        if board[i][j] == 1:
            return False
#for lower right diagonal
    for i, j in zip(range(row, N, 1),
                    range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    return True


def solveNQUtil(board, col):
    # base case: If all queens are placed # then return true
    if col >= N:#this means that we have placed n queens
        return True
    # Consider this column and try placing # this queen in all rows one by one
    for i in range(N):#to check if queen is safe to place

        if isSafe(board, i, col):
            #if issafe returns true then Place this queen in board[i][col]
            board[i][col] = 1

            # function call recursion for next col
            if solveNQUtil(board, col + 1) == True:
                return True

            # If placing queen doesn't lead to a solution, then remove queen
            board[i][col] = 0#backtracking

    return False# if the queen can not be placed in any row in # this column col then return false

# This function solves the N Queen problem using Backtracking. 
# It mainly uses solveNQUtil() to solve the problem. 
# It returns false if queens cannot be placed, otherwise return true with placement of queens in the form of 1s.
def solveNQ():
    board = [[0, 0, 0, 0],
             [0, 0, 0, 0],
             [0, 0, 0, 0],
             [0, 0, 0, 0]]

    if solveNQUtil(board, 0) == False:
        print("Solution does not exist")
        return False

    printSolution(board)
    return True
# Driver Code
solveNQ()

-----------------
Introduction to Backtracking
● Many problems are difficult to solve algorithmically. Backtracking makes it possible to solve at 
least some large instances of difficult combinatorial problems.
Suppose we have to make a series of decisions among various choices, where
● We don’t have enough information to know what to choose
● Each decision leads to a new set of choices.
● Some sequence of choices (more than one choices) may be a solution to your problem.
What is backtracking?
Backtracking is finding the solution of a problem whereby the solution depends on the previous steps taken. 
For example, in a maze problem, the solution depends on all the steps you take one-by-one. If any of those steps is wrong, 
then it will not lead us to the solution. In a maze problem, we first choose a path and continue moving along it.
 But once we understand that the particular path is incorrect, then we just come back and change it. 
This is what backtracking basically is.
In backtracking, we first take a step and then we see if this step taken is correct or not i.e.,
 whether it will give a correct answer or not. And if it doesn’t, then we just come back and change our first step. 
In general, this is accomplished by recursion. Thus, in backtracking, we first start with a partial sub-solution of the problem 
(which may or may not lead us to the solution) and then check if we can proceed further with this sub-solution or not. 
If not, then we just come back and change it.
Thus, the general steps of backtracking are:
● start with a sub-solution
● check if this sub-solution will lead to the solution or not
● If not, then come back and change the sub-solution and continue again
Applications of Backtracking:
● N Queens Problem
● Sum of subsets problem
N-Queens Problem:
A classic combinational problem is to place n queens on a n*n chess board so that no two attack,
 i.,e no two queens are on the same row, column or diagonal.
What is the N Queen Problem?
N Queen problem is the classical Example of backtracking. N-Queen problem is defined as, “given N x N chess board, 
arrange N queens in such a way that no two queens attack each other by being in the same row, column or diagonal”.
● For N = 1, this is a trivial case. For N = 2 and N = 3, a solution is not possible. 
So we start with N = 4 and we will generalize it for N queens.
If we take n=4then the problem is called the 4 queens problem. If we take n=8 then the problem is called the 8 queens problem. 
Algorithm
1) Start in the leftmost column
2) If all queens are place return true
3) Try all rows in the current column.
Do following for every tried row.
a) If the queen can be placed safely in this row then mark this [row, column] as part of the solution and 
recursively check if placing queen here leads to a solution.
b) If placing the queen in [row, column] leads to a solution then return true.
c) If placing queen doesn't lead to a solution then unmark this [row, column] (Backtrack) and go to step (a) to try other rows.
4) If all rows have been tried and nothing worked,return false to trigger backtracking.
4- Queen Problem
Problem 1 : Given 4 x 4 chessboard, arrange four queens in a way, such that no two queens attack each other. 
That is, no two queens are placed in the same row, column, or diagonal.
We have to arrange four queens, Q1, Q2, Q3 and Q4 in 4 x 4 chess board. We will put with queen in ith row.
 Let us start with position (1, 1). Q1 is the only queen, so there is no issue. partial solution is
<1>
● We cannot place Q2 at positions (2, 1) or (2, 2). Position (2, 3) is acceptable. the partial solution is <1, 3>.
● Next, Q3 cannot be placed in position (3, 1) as Q1 attacks her. And it cannot be placed at (3, 2), (3, 3) 
or (3, 4) as Q2 attacks her. There is no way to put Q3 in the third row. 
Hence, the algorithm backtracks and goes back to the previous solution and readjusts the position of queen Q2. 
Q2 is moved from positions (2, 3) to
(2, 4). Partial solution is <1, 4>
Now, Q3 can be placed at position (3, 2). Partial solution is <1, 4, 3>.
● Queen Q4 cannot be placed anywhere in row four. So again, backtrack to the previous solution and readjust the position of Q3.
 Q3 cannot be placed on (3, 3) or(3, 4). So the algorithm backtracks even further.
● All possible choices for Q2 are already explored, hence the algorithm goes back to partial solution
<1> and moves the queen Q1 from (1, 1) to (1, 2). And this process continues until a solution is found.