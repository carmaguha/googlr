def recur(n):
   if n <= 1:
       return n

   else:
       return(recur(n-1) + recur(n-2))

def iterative(n):
    a = 0
    b = 1

    print(a)
    print(b)

    for i in range(2, n):
        c = a + b
        a = b
        b = c
        print(c)

if __name__ == "__main__":

    num = int(input("Enter the nth number for series: "))

    if num <= 0:
       print("Please enter a positive integer")

    else:
       print("Fibonacci sequence with recursion:")

       for i in range(num):
           print(recur(i))

    print("Fibonacci series with Iteration:")
    iterative(num)

What is the Fibonacci Series?
The Fibonacci series is the sequence of numbers (also called Fibonacci numbers), where every number is the sum of the preceding two numbers, such that the first two terms are '0' and '1'.
A Fibonacci series can thus be given as, 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, . . . It can be thus be observed that every term can be calculated by adding the two terms before it.
Given the first term, F0 and second term, F1 as '0' and '1', the third term here can be given as, F2 = 0 + 1 = 1
Similarly,
F3 = 1 + 1 = 2
F4 = 2 + 1 = 3

Time and Space Complexity of Space Optimized Method- Iterative
The time complexity of the Fibonacci series is T(N) i.e, linear. We have to find the sum of two terms and it is repeated n times depending on the value of n.
The space complexity of the Fibonacci series using dynamic programming is O(1).
Time Complexity and Space Complexity of Dynamic Programming
The time complexity of the above code is T(N) i.e, linear. We have to find the sum of two terms and it is repeated n times depending on the value of n.
The space complexity of the above code is O(N).

Time and Space Complexity recursive
The time complexity of the above code is T(2^N) i.e, exponential.

Method					Time complexity			Space complexity
Using recursion				T(n) = T(n-1) + T(n-2)		O(n)
Using DP					O(n)					O(1)
Space optimization of DP		O(n)					O(1)
Using the power of matrix method	O(n)					O(1)
Optimized matrix method			O(log n)				O(log n)
Recursive method in O(log n) time	O(log n)				O(n)
Using direct formula			O(log n)				O(1)
DP using memoization			O(n)					O(1)